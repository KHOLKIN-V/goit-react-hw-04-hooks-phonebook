{"version":3,"sources":["components/ContactItem/ContactItem.module.css","components/AddContactForm/AddContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactBook/ContactBook.jsx","App.js","index.js","components/AddContactForm/AddContactForm.module.css","components/ContactBook/ContactBook.module.css","components/Filter/Filter.module.css"],"names":["module","exports","AddContactForm","submit","useState","name","setName","number","setNumber","addInputContact","e","currentTarget","value","reset","className","cs","title","form","onSubmit","preventDefault","trim","inputTitle","type","pattern","required","onChange","addBtn","Filter","onFilter","filterContainer","input","target","ContactItem","onDelete","id","btnDeleteContact","onClick","ContactBook","data","list","map","item","App","contacts","setContacts","filter","setFilter","useEffect","localStorage","setItem","JSON","stringify","parsContacts","parse","getItem","deleteContact","deleteId","old","filtered","i","toLowerCase","includes","some","alert","newContact","nanoid","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.887c6394.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDeleteContact\":\"ContactItem_btnDeleteContact__1b2Id\"};","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport cs from \"./AddContactForm.module.css\";\r\n\r\nexport default function AddContactForm({ submit }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const addInputContact = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const submitContact = (e) => {\r\n    e.preventDefault();\r\n    if (name.trim() === \"\") return;\r\n\r\n    submit({\r\n      name,\r\n      number,\r\n    });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 className={cs.title}>Phonebook</h1>\r\n      <form className={cs.form} onSubmit={submitContact}>\r\n        <label className={cs.inputTitle}>\r\n          Name\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={addInputContact}\r\n          />\r\n          <br />\r\n          Number\r\n          <br />\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={addInputContact}\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"submit\" className={cs.addBtn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\n// class AddContactForm extends Component {\r\n//   state = {\r\n//     name: \"\",\r\n//     number: \"\",\r\n//   };\r\n\r\n//   addInputContact = (e) => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//   submitContact = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.submit({\r\n//       name: this.state.name,\r\n//       number: this.state.number,\r\n//     });\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = (e) => {\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <h1 className={cs.title}>Phonebook</h1>\r\n//         <form className={cs.form} onSubmit={this.submitContact}>\r\n//           <label className={cs.inputTitle}>\r\n//             Name\r\n//             <br />\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"name\"\r\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//               required\r\n//               value={this.state.name}\r\n//               onChange={this.addInputContact}\r\n//             />\r\n//             <br />\r\n//             Number\r\n//             <br />\r\n//             <input\r\n//               type=\"tel\"\r\n//               name=\"number\"\r\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//               required\r\n//               value={this.state.number}\r\n//               onChange={this.addInputContact}\r\n//             />\r\n//           </label>\r\n//           <br />\r\n//           <button type=\"submit\" className={cs.addBtn}>\r\n//             Add contact\r\n//           </button>\r\n//         </form>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\nAddContactForm.propTypes = {\r\n  submit: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport cs from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ value, onFilter }) => {\r\n  return (\r\n    <div className={cs.filterContainer}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        className={cs.input}\r\n        value={value}\r\n        onChange={(e) => onFilter(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from \"prop-types\";\r\nimport cs from \"./ContactItem.module.css\";\r\n\r\nconst ContactItem = ({ name, number, onDelete, id }) => {\r\n  return (\r\n    <>\r\n      {name}: {number}\r\n      <button\r\n        className={cs.btnDeleteContact}\r\n        type=\"button\"\r\n        name=\"delete\"\r\n        onClick={() => onDelete(id)}\r\n      >\r\n        DELETE\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ContactItem from \"../ContactItem/ContactItem\";\r\nimport cs from \"./ContactBook.module.css\";\r\n\r\nconst ContactBook = ({ data, onDelete }) => {\r\n  return (\r\n    <>\r\n      <h2 className={cs.title}>Contacts</h2>\r\n      <ul className={cs.list}>\r\n        {data.map(({ name, number, id }) => (\r\n          <>\r\n            <li className={cs.item} key={id}>\r\n              <ContactItem\r\n                name={name}\r\n                number={number}\r\n                onDelete={onDelete}\r\n                id={id}\r\n              />\r\n            </li>\r\n          </>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nContactBook.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactBook;\r\n","import { useState, useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport AddContactForm from './components/AddContactForm/AddContactForm'\r\nimport Filter from './components/Filter/Filter'\r\nimport ContactBook from './components/ContactBook/ContactBook';\r\n\r\nexport default function App() {\r\n    const [contacts, setContacts] = useState([]);\r\n    const [filter, setFilter] = useState('');\r\n\r\n    useEffect(() => {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(contacts))\r\n    }, [contacts]);\r\n\r\n    useEffect(() => {\r\n      const parsContacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n      if (parsContacts) {\r\n        setContacts(parsContacts);\r\n      }\r\n    },[])\r\n\r\n    const formSubmit = (data) => {\r\n\r\n        const searchContact = contacts.some((e) => e.name.includes(data.name));\r\n    \r\n        if (searchContact) {\r\n          alert(`${data.name} is already in contacts`);\r\n        } else {\r\n          const newContact = {\r\n            ...data, id: nanoid(),\r\n          };\r\n          setContacts(old => [...old, newContact]);\r\n        }\r\n    };\r\n    \r\n    const filterContacts = () => {\r\n        return contacts.filter(i =>\r\n            i.name.toLowerCase().includes(filter.toLowerCase())\r\n        );\r\n    };\r\n    \r\n    const reshapeFilter = (e) => {\r\n        setFilter(e);\r\n    };\r\n    \r\n    const deleteContact = (deleteId) => {\r\n        setContacts(old => \r\n          old.filter(e => e.id !== deleteId),\r\n        );\r\n    }\r\n    const filtered = filterContacts();\r\n\r\n    return (\r\n        <>\r\n        <AddContactForm submit={formSubmit} />\r\n        <Filter value={filter} onFilter={reshapeFilter}/>\r\n        {filtered.length >= 0 ? \r\n            <ContactBook data={filtered} onDelete={deleteContact}/>\r\n           : <ContactBook data={contacts} onDelete={deleteContact}/>\r\n        }\r\n        </>\r\n      );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"AddContactForm_title__WUyWb\",\"inputTitle\":\"AddContactForm_inputTitle__YFL4G\",\"form\":\"AddContactForm_form__3Q_AA\",\"addBtn\":\"AddContactForm_addBtn__21iYy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactBook_title__2N1Fk\",\"list\":\"ContactBook_list__1s08_\",\"item\":\"ContactBook_item__3zfre\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterContainer\":\"Filter_filterContainer__3ZKJI\",\"input\":\"Filter_input__24JK4\"};"],"sourceRoot":""}